class Solution {
    public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {
         Map<String, Integer> memo = new HashMap<>();
        return dfs(price, special, needs, memo);
    }

    private int dfs(List<Integer> price, List<List<Integer>> special, List<Integer> needs, Map<String, Integer> memo) {
        
        String key = encode(needs);
        if (memo.containsKey(key)) {
            return memo.get(key);
        }

        
        int minCost = 0;
        for (int i = 0; i < needs.size(); i++) {
            minCost += price.get(i) * needs.get(i);
        }

        
        for (List<Integer> offer : special) {
            // Check if we can apply this offer
            List<Integer> newNeeds = new ArrayList<>(needs);
            boolean canApply = true;
            for (int i = 0; i < needs.size(); i++) {
                newNeeds.set(i, needs.get(i) - offer.get(i));
                if (newNeeds.get(i) < 0) {
                    canApply = false;
                    break;
                }
            }

            // If the offer can be applied, recurse
            if (canApply) {
                int offerCost = offer.get(needs.size()); // The cost of the offer
                minCost = Math.min(minCost, offerCost + dfs(price, special, newNeeds, memo));
            }
        }

        
        memo.put(key, minCost);
        return minCost;
    }

    // Helper function to encode the needs list as a string for memoization
    private String encode(List<Integer> needs) {
        StringBuilder sb = new StringBuilder();
        for (int need : needs) {
            sb.append(need).append(",");
        }
        return sb.toString();
    }
}
